# ==============================================================================
# Docker Compose Stack: Nextcloud (existing) + OpenAI-powered services
# Target: Radxa ARM64 (16GB RAM)
#
# CRITICAL: This file preserves existing Nextcloud configuration and data.
# - The original nextcloud-db (PostgreSQL 15) remains unchanged for compatibility.
# - A new shared PostgreSQL (pgvector/pgvector:pg17) is added for AI apps.
# - Nextcloud continues to function exactly as before (port 9991, volumes unchanged).
#
# Key Ports:
# - 9991: Nextcloud (existing)
# - 9992: n8n
# - 9993: anythingllm
# - 9995: Open WebUI 
# - 9998: OpenUI
#
# Networks:
# - nas_network: existing network for Nextcloud stack
# - ai_network: new network for AI services
#
# Security:
# - No external exposure of any database ports
# - n8n uses basic auth
# - SurfSense uses NextAuth
# - All services accept OPENAI_API_KEY from .env
# ==============================================================================

services:
  # ============================================================================
  # EXISTING NEXTCLOUD SERVICES (DO NOT MODIFY)
  # ============================================================================

  nextcloud:
    build: .
    platform: linux/arm64
    container_name: nas_nextcloud
    restart: unless-stopped
    ports:
      - "9991:80"
    env_file:
      - .env
    environment:
      - POSTGRES_HOST=nextcloud-db
      - POSTGRES_DB=nextcloud
      - POSTGRES_USER=nextcloud
      - POSTGRES_PASSWORD=${NEXTCLOUD_DB_PASSWORD}
      - NEXTCLOUD_ADMIN_USER=${NEXTCLOUD_ADMIN_USER}
      - NEXTCLOUD_ADMIN_PASSWORD=${NEXTCLOUD_ADMIN_PASSWORD}
      - PHP_MEMORY_LIMIT=4G
      - PHP_UPLOAD_LIMIT=16G
    volumes:
      - ./nextcloud/html:/var/www/html
      - /mnt/storage/nextcloud:/var/www/html/data
    depends_on:
      nextcloud-db:
        condition: service_healthy
      redis:
        condition: service_started
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost/status.php" ]
      interval: 30s
      timeout: 10s
      retries: 10
    networks:
      - nas_network

  nextcloud-cron:
    image: nextcloud:latest
    platform: linux/arm64
    container_name: nas_nextcloud_cron
    restart: unless-stopped
    env_file:
      - .env
    volumes:
      - ./nextcloud/html:/var/www/html
      - /mnt/storage/nextcloud:/var/www/html/data
    entrypoint: /cron.sh
    depends_on:
      - nextcloud-db
      - redis
    networks:
      - nas_network

  nextcloud-db:
    image: postgres:15-alpine
    platform: linux/arm64
    container_name: nas_nextcloud_db
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - POSTGRES_DB=nextcloud
      - POSTGRES_USER=nextcloud
      - POSTGRES_PASSWORD=${NEXTCLOUD_DB_PASSWORD}
    volumes:
      - ./nextcloud/db:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U nextcloud -d nextcloud" ]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - nas_network

  redis:
    image: redis:alpine
    platform: linux/arm64
    container_name: nas_redis
    restart: unless-stopped
    env_file:
      - .env
    command: [ "redis-server", "--requirepass", "${REDIS_PASSWORD}" ]
    volumes:
      - ./nextcloud/redis:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "PING" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - nas_network

  # ============================================================================
  # NEW AI SERVICES
  # ============================================================================

  # Shared PostgreSQL (pgvector) for AI services
  postgres:
    image: pgvector/pgvector:pg17
    platform: linux/arm64
    container_name: ai_postgres
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=postgres
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
      - ./pgvector-init:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d postgres" ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - ai_network

  # n8n - Workflow Automation (Port 9992)
  n8n:
    image: docker.n8n.io/n8nio/n8n:latest
    platform: linux/arm64
    container_name: ai_n8n
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=${N8N_BASIC_AUTH_USER}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_BASIC_AUTH_PASSWORD}
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - N8N_HOST=0.0.0.0
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - NODE_OPTIONS=--max-old-space-size=512
    ports:
      - "9992:5678"
    volumes:
      - ./data/n8n:/home/node/.n8n
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://localhost:5678/healthz" ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - ai_network

  anythingllm:
    image: mintplexlabs/anythingllm:latest
    platform: linux/arm64
    container_name: ai_anythingllm
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - STORAGE_DIR=/app/server/storage
      - SERVER_PORT=3001
      - LLM_PROVIDER=openai
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_MODEL_PREF=gpt-5
      - EMBEDDING_ENGINE=openai
      - EMBEDDING_MODEL_PREF=text-embedding-3-small
      - VECTOR_DB=lancedb
    ports:
      - "9993:3001"
    volumes:
      - ./data/anythingllm:/app/server/storage
    cap_add:
      - SYS_ADMIN
    networks:
      - ai_network

  # Open WebUI - Voice Chat (Port 9995)
  open_webui:
    image: ghcr.io/open-webui/open-webui:main
    platform: linux/arm64
    container_name: ai_open_webui
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ENABLE_OPENAI_API=true
      - WHISPER_MODEL=whisper-1
      - TTS_VOICE=alloy
      - TRANSFORMERS_CACHE_HOME=/tmp
      - HF_HOME=/tmp
      - SENTENCE_TRANSFORMERS_HOME=/tmp
    ports:
      - "9995:8080"
    volumes:
      - ./data/open_webui:/app/backend/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - ai_network

  # OpenUI - UI Generation (Port 9998)
  openui:
    image: ghcr.io/wandb/openui:latest
    platform: linux/arm64
    container_name: ai_openui
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    ports:
      - "9998:7878"
    volumes:
      - ./data/openui:/app/data
    networks:
      - ai_network

# ==============================================================================
# Networks
# ==============================================================================
networks:
  nas_network:
    driver: bridge
  ai_network:
    driver: bridge
