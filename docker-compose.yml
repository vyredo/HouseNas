services:
  cloudflared:
    build: .
    restart: unless-stopped
    command: tunnel --no-autoupdate run
    volumes:
      - ./secrets/credentials.json:/etc/cloudflared/credentials.json:ro
      - ./secrets/cert.pem:/etc/cloudflared/cert.pem:ro
    networks:
      - nas_network
    depends_on:
      nextcloud-db:
        condition: service_healthy
      redis:
        condition: service_healthy

  nextcloud:
    image: nextcloud:latest
    platform: linux/arm64
    container_name: nas_nextcloud
    restart: unless-stopped
    ports:
      - "9991:80"
    env_file:
      - .env
    environment:
      # Database connection variables (sourced from .env)
      - POSTGRES_HOST=nextcloud-db
      - POSTGRES_DB=nextcloud
      - POSTGRES_USER=nextcloud
      - POSTGRES_PASSWORD=${NEXTCLOUD_DB_PASSWORD}
      # Admin credentials (sourced from .env)
      - NEXTCLOUD_ADMIN_USER=${NEXTCLOUD_ADMIN_USER}
      - NEXTCLOUD_ADMIN_PASSWORD=${NEXTCLOUD_ADMIN_PASSWORD}
      # Nextcloud behind Cloudflare Tunnel settings (required)
      - OVERWRITEPROTOCOL=https
      - OVERWRITEHOST=nas.soundsgoodlab.sg
      - TRUSTED_PROXIES=172.16.0.0/12
      # PHP tuning for Radxa device
      - PHP_MEMORY_LIMIT=4G
      - PHP_UPLOAD_LIMIT=16G
    volumes:
      - ./nextcloud/html:/var/www/html # Nextcloud application files (persisted)
      - /mnt/storage/nextcloud:/var/www/html/data # User files stored on external drive (absolute path)
    depends_on:
      nextcloud-db:
        condition: service_healthy
      redis:
        condition: service_started
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost/status.php" ]
      interval: 30s
      timeout: 10s
      retries: 10
    networks:
      - nas_network

  nextcloud-cron:
    image: nextcloud:latest
    platform: linux/arm64
    container_name: nas_nextcloud_cron
    restart: unless-stopped
    env_file:
      - .env
    volumes:
      - ./nextcloud/html:/var/www/html
      - /mnt/storage/nextcloud:/var/www/html/data
    entrypoint: /cron.sh
    depends_on:
      - nextcloud-db
      - redis
    networks:
      - nas_network

  nextcloud-db:
    image: postgres:15-alpine
    platform: linux/arm64
    container_name: nas_nextcloud_db
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - POSTGRES_DB=nextcloud
      - POSTGRES_USER=nextcloud
      - POSTGRES_PASSWORD=${NEXTCLOUD_DB_PASSWORD}
    volumes:
      - ./nextcloud/db:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U nextcloud -d nextcloud" ]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - nas_network

  redis:
    image: redis:alpine
    platform: linux/arm64
    container_name: nas_redis
    restart: unless-stopped
    env_file:
      - .env
    # Secure Redis with a password from .env; the configure script will set a strong password.
    command: [ "redis-server", "--requirepass", "${REDIS_PASSWORD}" ]
    volumes:
      - ./nextcloud/redis:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "PING" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - nas_network

# Shared network for service name resolution and isolation
networks:
  nas_network:
    driver: bridge

# Notes:
# - All services use .env for sensitive values. Never commit .env to public repos.
# - Ensure /mnt/storage/nextcloud is owned by UID:GID 1000:1000 as the setup script will set.
# - Cloudflare Tunnel will route external HTTPS traffic to the cloudflared sidecar which forwards to nextcloud on port 80.
# - To update images: `docker compose pull && docker compose up -d`
# - If you prefer Redis without a password, remove the `--requirepass` command and REDIS_PASSWORD from .env (not recommended).
